;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(regexp-history counsel-imenu-history empty-history tmm--history imenu--history-list counsel-descbinds-history grep-find-history grep-files-history grep-regexp-history counsel-git-grep-history counsel-grep-history grep-history buffer-name-history coding-system-history extended-command-history ivy-history counsel-apropos-history counsel-M-x-history counsel-describe-symbol-history swiper-history string-rectangle-history read-expression-history minibuffer-history search-ring file-name-history))
(setq regexp-history '("spacemacs-buffer-mode"))
(setq tmm--history '("D==>Set Default Font..." "c==>Customize Emacs" "M==>Manage Emacs Packages" "o==>Save Options" "D==>Set Default Font..." "S==>Show/Hide" "m==>Multilingual Environment" "E==>Enter Debugger on Quit/C-g" "e==>Enter Debugger on Error" "b==>Blink Cursor" "s==>Save Place in Files between Sessions" "U==>Use Directory Names in Buffer Names" "u==>Use CUA Keys (Cut/Paste with C-x/C-c/C-v)" "d==>Default Search Options" "l==>Line Wrapping in This Buffer" "H==>Highlight Matching Parentheses" "h==>Highlight Active Region" "c==>Customize Emacs" "M==>Manage Emacs Packages" "o==>Save Options" "D==>Set Default Font..." "S==>Show/Hide" "m==>Multilingual Environment" "E==>Enter Debugger on Quit/C-g" "e==>Enter Debugger on Error" "b==>Blink Cursor" "s==>Save Place in Files between Sessions" "U==>Use Directory Names in Buffer Names" "u==>Use CUA Keys (Cut/Paste with C-x/C-c/C-v)" "d==>Default Search Options" "l==>Line Wrapping in This Buffer" "H==>Highlight Matching Parentheses" "h==>Highlight Active Region" "c==>Customize Emacs" "M==>Manage Emacs Packages" "o==>Save Options" "D==>Set Default Font..." "S==>Show/Hide" "m==>Multilingual Environment" "E==>Enter Debugger on Quit/C-g" "e==>Enter Debugger on Error" "b==>Blink Cursor" "s==>Save Place in Files between Sessions" "U==>Use Directory Names in Buffer Names" "u==>Use CUA Keys (Cut/Paste with C-x/C-c/C-v)" "d==>Default Search Options" "l==>Line Wrapping in This Buffer" "H==>Highlight Matching Parentheses" "h==>Highlight Active Region" "c==>Customize Emacs" "M==>Manage Emacs Packages" "o==>Save Options" "D==>Set Default Font..." "S==>Show/Hide" "m==>Multilingual Environment" "E==>Enter Debugger on Quit/C-g" "e==>Enter Debugger on Error" "b==>Blink Cursor" "s==>Save Place in Files between Sessions" "U==>Use Directory Names in Buffer Names" "u==>Use CUA Keys (Cut/Paste with C-x/C-c/C-v)" "d==>Default Search Options" "l==>Line Wrapping in This Buffer" "H==>Highlight Matching Parentheses" "h==>Highlight Active Region"))
(setq imenu--history-list '(#("counsel--async-time" 0 19 (ivy-index 0 idx 0)) #("Variables" 0 9 (ivy-index 2 idx 2))))
(setq counsel-descbinds-history '(#("C-x C-'         ahs-change-range" 0 15 (ivy-index 7 idx 7 face counsel-key-binding) 15 32 (ivy-index 7 idx 7)) #("<M-right>       ahs-forward" 0 15 (ivy-index 5 idx 5 face counsel-key-binding) 15 27 (ivy-index 5 idx 5)) #("ESC             Prefix Command" 0 15 (ivy-index 1 idx 1 face counsel-key-binding) 15 30 (ivy-index 1 idx 1))))
(setq grep-find-history '("find . -type f -exec grep  -nH --null windows \"{}\" \";\""))
(setq grep-regexp-history '("windows"))
(setq counsel-git-grep-history '(#("(setq auto-save-default nil)" 0 28 (ivy-index 0)) "./lisp/init-basic.el--my:87:;; (setq auto-save-default nil)               ; Disable auto save" #("by the community" 0 16 (ivy-index 1)) "./spacemacs/core/core-spacemacs-buffer.el:249:           (build-rhs \" by the community\")" #("autopair-mode" 0 13 (ivy-index 1)) "./lisp/nav-mode.el:210:  (autopair-mode -1))" "./lisp/nav-mode.el:163:  (autopair-mode 1))" #("coding-system" 0 13 (ivy-index 0)) "./lisp/init-funcs.el:41:  (set-buffer-file-coding-system 'undecided-unix nil))" #("wangms-Loading" 0 14 (ivy-index 1)) "./lisp/init-paths.el:149:  (message \"wangms-Loading %s...\" (locate-library (ad-get-arg 0))))"))
(setq counsel-grep-history '(#("windows" 0 7 (ivy-index 0)) "235:(when (string-equal system-type \"windows-nt\")" #("ivy" 0 3 (ivy-index 0))))
(setq grep-history '("grep  -n windows" "grep  -nH --null windows" "grep  -n ivy"))
(setq buffer-name-history '(#("init-load-paths.el" 0 18 (ivy-index 0)) #("*Warning*" 0 9 (ivy-index 0))))
(setq coding-system-history '(#("utf-8" 0 5 (ivy-index 865 idx 865))))
(setq extended-command-history '("display-line-numbers-mode" #("counsel-mode" 0 12 (ivy-index 2))))
(setq ivy-history '(#("find-function-on-key" 0 20 (ivy-index 0)) #("eval-expression" 0 15 (ivy-index 1)) #("init.el" 0 7 (ivy-index 2)) #("init-edit-visual.el" 0 19 (ivy-index 1)) #("path" 0 4 (ivy-index 0)) "init-paths.el" #("init-paths.el" 0 13 (face ivy-virtual ivy-index 4)) #("init-hydra.el" 0 13 (face ivy-virtual ivy-index 6)) #("init-icons.el" 0 13 (ivy-index 5 face ivy-virtual)) #("paths.el" 0 8 (ivy-index 0)) #("pa" 0 2 (ivy-index 1)) #("init-modeline.el" 0 16 (face ivy-virtual ivy-index 4)) #("init-load-paths.el" 0 18 (face ivy-virtual ivy-index 4)) #("describe-bindings" 0 17 (ivy-index 3383)) #("init-ivy.el" 0 11 (ivy-index 8 face ivy-virtual)) #("init-frame.el" 0 13 (face ivy-virtual ivy-index 9)) #("counsel-describe-face" 0 21 (ivy-index 3282)) #("swiper" 0 6 (ivy-index 3714)) #("ivy-resume" 0 10 (ivy-index 1620)) #("counsel-mode-map" 0 16 (ivy-index 5419)) #("yank-pop" 0 8 (ivy-index 759)) #("load-theme" 0 10 (ivy-index 1845)) #("load-library" 0 12 (ivy-index 3631)) #("imenu" 0 5 (ivy-index 1640)) #("find-library" 0 12 (ivy-index 34)) #("find-file" 0 9 (ivy-index 3567)) #("list-faces-display" 0 18 (ivy-index 681)) #("describe-face" 0 13 (ivy-index 2023)) #("apropos-command" 0 15 (ivy-index 2021)) #("describe-symbol" 0 15 (ivy-index 1189)) #("describe-variable" 0 17 (ivy-index 720)) #("describe-function" 0 17 (ivy-index 2959)) #("execute-extended-command" 0 24 (ivy-index 2137))))
(setq counsel-apropos-history '(#("eval-expression" 0 15 (ivy-index 0)) #("read--expression-try-read" 0 25 (ivy-index 0)) #("with-no-warnings" 0 16 (ivy-index 1))))
(setq counsel-M-x-history '(#("^find-function-on-key" 0 21 (ivy-index 0)) "find-function-on-key" #("^counsel-rg" 0 11 (ivy-index 0)) "counsel-rg" #("^occur" 0 6 (ivy-index 9)) "occur" "counsel-rg" #("^display-line-numbers-mode" 0 26 (ivy-index 0)) "display-line-numbers-mode" "display-line-numbers-mode" "display-line-numbers-mode" #("^key" 0 4 (ivy-index 2)) "keycast-mode" #("^keycast-mode" 0 13 (ivy-index 0)) "keycast-mode" #("^counsel-imenu" 0 14 (ivy-index 0)) "counsel-imenu" "counsel-imenu" "counsel-rg" "counsel-rg" #("^nav-mode" 0 9 (ivy-index 0)) "nav-mode" "nav-mode" "display-line-numbers-mode" "display-line-numbers-mode" #("^global-linum-mode" 0 18 (ivy-index 0)) "global-linum-mode" #("^page-break-lines-mode" 0 22 (ivy-index 0)) "page-break-lines-mode" "global-linum-mode" "global-linum-mode" #("^menu-bar-open" 0 14 (ivy-index 0)) #("menu-bar-open" 0 13 (ivy-index 1)) "w32-menu-bar-open" "counsel-rg" #("^" 0 1 (ivy-index 0)) "^
dumb-jump-hydra/dumb-jump-go-prefer-ex… Call the head ‘dumb-jump-go-prefer-external’ in the \"dumb-jump-hydra\" hydra.
enable-theme                             Reenable all variable and face settings defined by THEME.
vc-git-stash-snapshot                    Create a stash with the current tree state.
winum-select-window-by-number (C-x w ²)  Select or delete window which number is specified by ARG.
counsel-compile-env                      Update ‘counsel-compile-env’ interactively.
url-setup-privacy-info                   Setup variables that expose info about you and your system.
flycheck-next-error (C-c ! n)            Visit the N-th error from the current point.
dired-backup-diff                        Diff this file with its backup file or vice versa.
dired-at-point                           Start Dired, defaulting to file at point.  See ‘ffap’." "global-linum-mode" "global-linum-mode" "global-linum-mode" "global-linum-mode" "counsel-rg" #("^coun rg" 0 8 (ivy-index 8)) "counsel-rg" #("^couns rg" 0 9 (ivy-index 8)) "counsel-rg" #("^counsel-" 0 9 (ivy-index 89)) "counsel-rg" "counsel-rg" #("^imenu" 0 6 (ivy-index 0)) "imenu" "imenu" #("^i" 0 2 (ivy-index 0)) "ibuffer-update" #("^counsel gre" 0 12 (ivy-index 7)) "counsel-grep" #("^coun grep" 0 10 (ivy-index 0)) "counsel-grep-or-swiper" #("^grep-" 0 6 (ivy-index 1)) "grep-find" #("^grep" 0 5 (ivy-index 2)) #("grep" 0 4 (ivy-index 24)) #("rg" 0 2 (ivy-index 0)) "digit-argument" #("^rg" 0 3 (ivy-index 0)) "rgrep" "counsel-rg" "counsel-rg" "^
enable-theme
vc-git-stash-snapshot
winum-select-window-by-number (C-x w ²)
counsel-compile-env
url-setup-privacy-info
flycheck-next-error (C-c ! n)
dired-backup-diff
dired-at-point
counsel-switch-buffer-other-window" "counsel-grep-or-swiper" "^
enable-theme
vc-git-stash-snapshot
winum-select-window-by-number (C-x w ²)
counsel-compile-env
url-setup-privacy-info
flycheck-next-error (C-c ! n)
dired-backup-diff
dired-at-point
counsel-switch-buffer-other-window" "counsel-grep" #("^coun gr" 0 8 (ivy-index 7)) "counsel-grep" #("eval-region" 0 11 (ivy-index 0)) #("^eval-region" 0 12 (ivy-index 0)) #("git" 0 3 (ivy-index 1)) "counsel-git" "counsel-git" #("counsel-rg" 0 10 (ivy-index 0)) #("find-file" 0 9 (ivy-index 42))))
(setq counsel-describe-symbol-history '(#("^load-path" 0 10 (ivy-index 0)) "load-path" "load-path" "load-path" #("^user-emacs-directory" 0 21 (ivy-index 1)) "user-emacs-directory" #("^" 0 1 (ivy-index 5716)) "display-line-numbers-mode" "display-line-numbers-mode" "display-line-numbers-mode" #("^keycast-mode" 0 13 (ivy-index 1)) "keycast-mode" "interactive" "file-name-handler-alist" "require" "exec-path" "exec-path" "exec-path" "exec-path" "exec-path" "exec-path" #("^load-file-name" 0 15 (ivy-index 0)) "load-file-name" #("^load-in-progress" 0 17 (ivy-index 0)) "load-in-progress" "load-file-name" "load-in-progress" "load-file-name" "load-in-progress" "load-in-progress" "load-file-name" #("^find-file" 0 10 (ivy-index 14)) "find-file" #("user" 0 4 (ivy-index 0)) "user-full-name" #("^temporary-file-directory" 0 25 (ivy-index 0)) "temporary-file-directory"))
(setq swiper-history '(#("keyca" 0 5 (ivy-index 0)) #(" ;; ( use-package keycast" 0 1 (swiper-line-number 616 display "616  ") 1 4 (fontified t face font-lock-comment-delimiter-face) 4 25 (fontified t face font-lock-comment-face)) "display-line-numbers-mode" "keycast-mode" "powerline-minor-modes" #("powerline-mouse" 0 15 (ivy-index 4)) #("                                           (powerline-mouse 'minor 'menu mm))" 0 1 (display "233  " swiper-line-number 233) 1 43 (fontified t) 43 44 (face (rainbow-delimiters-depth-7-face) fontified t) 44 75 (fontified t) 75 76 (face (rainbow-delimiters-depth-7-face) fontified t) 76 77 (face (rainbow-delimiters-depth-6-face) fontified t)) #(" (defun powerline-mouse (click-group click-type string)" 0 1 (display "109  " swiper-line-number 109) 1 2 (face (rainbow-delimiters-depth-1-face) fontified t) 2 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 23 (face font-lock-function-name-face fontified t) 23 24 (fontified t) 24 25 (face (rainbow-delimiters-depth-2-face) fontified t) 25 54 (fontified t) 54 55 (face (rainbow-delimiters-depth-2-face) fontified t)) #("nav/hydra/master" 0 16 (ivy-index 1)) #("     ((kbd \"`\") . nav/hydra/master/body)" 0 1 (swiper-line-number 786 display "786 ") 1 5 (fontified t) 5 6 (fontified t face (rainbow-delimiters-depth-3-face)) 6 7 (fontified t face (rainbow-delimiters-depth-4-face)) 7 11 (fontified t) 11 14 (fontified t face font-lock-string-face) 14 15 (fontified t face (rainbow-delimiters-depth-4-face)) 15 39 (fontified t) 39 40 (fontified t face (rainbow-delimiters-depth-3-face))) "nav/hydra/frames" "nav/hydra/macros" "nav/hydra/registers" "nav/" "nav/hydra/sexp-nav" #("toggle-nav-mode" 0 15 (ivy-index 0)) #(" (defun toggle-nav-mode (&optional nav/set-state)" 0 1 (display "172 " swiper-line-number 172) 1 2 (face (rainbow-delimiters-depth-1-face) fontified t) 2 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 23 (face font-lock-function-name-face fontified t) 23 24 (fontified t) 24 25 (face (rainbow-delimiters-depth-2-face) fontified t) 25 34 (face font-lock-type-face fontified t) 34 48 (fontified t) 48 49 (face (rainbow-delimiters-depth-2-face) fontified t)) "linum-off" "form-feed" "行" "wangms-Loading" #("wangms-Loading" 0 14 (ivy-index 0)) #(" ;;  (message \"wangms-Loading %s...\" (locate-library (ad-get-arg 0))))" 0 1 (display "180 " swiper-line-number 180) 1 5 (face font-lock-comment-delimiter-face fontified t) 5 29 (face font-lock-comment-face fontified t) 29 70 (face font-lock-comment-face fontified t)) "function" #("centaur-theme-enable-" 0 21 (ivy-index 0)) #("          :toggle (centaur-theme-enable-p 'default) :exit t)" 0 1 (swiper-line-number 104 display "104 ") 1 10 (fontified t) 10 17 (fontified t face font-lock-builtin-face) 17 18 (fontified t) 18 19 (fontified t face (rainbow-delimiters-depth-7-face)) 19 50 (fontified t) 50 51 (fontified t face (rainbow-delimiters-depth-7-face)) 51 52 (fontified t) 52 57 (fontified t face font-lock-builtin-face) 57 59 (fontified t) 59 60 (fontified t face (rainbow-delimiters-depth-6-face))) #("          :toggle (centaur-theme-enable-p 'default) :exit t)" 0 1 (display "104 " swiper-line-number 104) 1 10 (fontified t) 10 17 (face font-lock-builtin-face fontified t) 17 18 (fontified t) 18 19 (face (rainbow-delimiters-depth-7-face) fontified t) 19 50 (fontified t) 50 51 (face (rainbow-delimiters-depth-7-face) fontified t) 51 52 (fontified t) 52 57 (face font-lock-builtin-face fontified t) 57 59 (fontified t) 59 60 (face (rainbow-delimiters-depth-6-face) fontified t)) #("icons" 0 5 (ivy-index 1)) #("          (let ((f (intern (format \"all-the-icons-%s\" icon-type))))" 0 1 (display "47  " swiper-line-number 47) 1 6 (fontified t) 6 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-6-face) fontified t) 11 14 (face font-lock-keyword-face fontified t) 14 15 (fontified t) 15 16 (face (rainbow-delimiters-depth-7-face) fontified t) 16 17 (face (rainbow-delimiters-depth-8-face) fontified t) 17 19 (fontified t) 19 20 (face (rainbow-delimiters-depth-9-face) fontified t) 20 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-1-face) fontified t) 28 35 (fontified t) 35 53 (face font-lock-string-face fontified t) 53 63 (fontified t) 63 64 (face (rainbow-delimiters-depth-1-face) fontified t) 64 65 (face (rainbow-delimiters-depth-9-face) fontified t) 65 66 (face (rainbow-delimiters-depth-8-face) fontified t) 66 67 (face (rainbow-delimiters-depth-7-face) fontified t)) "major-mode-hydra" "TODO Specify" "s" "windows" "ripgrep" "window" #("hook" 0 4 (ivy-index 3)) #("   (add-hook 'after-init-hook" 0 1 (swiper-line-number 81 display "81  ") 1 3 (fontified t) 3 4 (fontified t face (rainbow-delimiters-depth-2-face)) 4 29 (fontified t)) "rescan" "counsel-projectile" "r"))
(setq string-rectangle-history '(";;  " ";;" ";;  " ";;    " ";;  " ";;" ";;  " ";;" ";;   " ";;" "  " ";;" ";;   " ";;  " ";;" ";;   " ";;"))
(setq read-expression-history '("(getenv \"emacs_dir\")" "(getnev \"emacs_dir\")" "(executable-find \"git\")" "(executable-find \"rg\")" "(executable-find \"rg\"" "(executable-find \"rg\")" "(executable-find \"grep\") " "(executable-find \"rg\")" "(executable-find \"grep\")" "(executable-find \"rg\")" "(executable-find \"git\")" "(executable-find \"rg\")" "(executable-find \"grep\")" "(executable-find \"git\")" "(executable-find \"rg\")" "(getenv ​\"exec-path\")" "(getenv \"path\")" "(setenv ​\"PATH\")" "wq"))
(setq minibuffer-history '("a" "undo-tree-auto-save-history" "undo-tree-history-directory-alist"))
(setq search-ring '("t" "r" "rq" "use-package" "use-pack" "backup" "b" "backup" "undo-tree" "lazy" "use-package" "use-packag" "use-package" "use"))
(setq file-name-history '("d:/emacs/.emacs.d--mini/init.el" "d:/emacs/.emacs.d/lisp/init-basic.el" "d:/emacs/.emacs.d--mini/init.el" "d:/emacs/.emacs.d/lisp/init-basic.el" "d:/emacs/.emacs.d/init.el.mini" "d:/emacs/.emacs.d/early-init.el" #("d:/emacs/.emacs.d/init.el" 0 25 (ivy-index 1)) #("d:/emacs/.emacs.d/early-init.el" 0 31 (ivy-index 0)) "d:/emacs/.emacs.d--spac/spacemacs/core/core-display-init.el" "d:/emacs/.emacs.d--spac/spacemacs/core/banners/img/spacemacs.png" "d:/emacs/.emacs.d--spac/spacemacs/core/banners/003-banner.txt" "d:/emacs/.emacs.d--spac/spacemacs/core/banners/001-banner.txt" "d:/emacs/.emacs.d--spac/spacemacs/core/banners/000-banner.txt" "~/.emacs.d/init.el" #("d:/emacs/.emacs.d/lisp/init-modeline.el" 0 39 (ivy-index 0)) "~/.emacs.d/init.el" #("d:/emacs/.emacs.d/lisp/" 0 23 (ivy-index 0)) #("d:/emacs/.emacs.d/lisp/init-edit-visual.el" 0 42 (ivy-index 0)) #("d:/emacs/.emacs.d/lisp/nav-mode.el" 0 34 (ivy-index 0)) "d:/emacs/.emacs.d/lisp/init-basic.el--my" #("d:/emacs/.emacs.d/custom.el" 0 27 (ivy-index 1)) "~/.emacs.d/init.el" #("d:/emacs/.emacs.d/lisp/init-package.el--my" 0 42 (ivy-index 1)) "~/.emacs.d/init.el" "~/.emacs.d/init.el" "~/.emacs.d/init.el" #("d:/emacs/.emacs.d/lisp/init-paths.el" 0 36 (ivy-index 2)) "~/.emacs.d/init.el" #("d:/emacs/.emacs.d/lisp/init-edit.el" 0 35 (ivy-index 1)) #("d:/emacs/.emacs.d/lisp/init-ivy.el" 0 34 (ivy-index 0)) #("d:/emacs/.emacs.d/lisp/init-frame.el" 0 36 (ivy-index 1)) #("d:/emacs/.emacs.d/lisp/init-imenu-list.el" 0 41 (ivy-index 1)) #("d:/user/下载/test.el" 0 18 (ivy-index 0)) "d:/user/下载/init-edit.el" #("d:/emacs/.emacs.d/lisp/init-basic.el" 0 36 (ivy-index 0)) #("d:/emacs/.emacs.d/" 0 18 (ivy-index 0)) #("d:/emacs/.emacs.d/lisp/init-icons.el" 0 36 (ivy-index 0)) #("d:/emacs/share/emacs/26.3/lisp/" 0 31 (ivy-index 0)) #("d:/emacs/.emacs.d/lisp/init-hydra.el" 0 36 (ivy-index 2)) #("d:/emacs/.emacs.d/lisp/init-hydra.el.back" 0 41 (ivy-index 3)) #("d:/emacs/.emacs.d/lisp/init-funcs.el" 0 36 (ivy-index 0)) #("d:/emacs/.emacs.d/lisp/init-stardict.el" 0 39 (ivy-index 0)) #("d:/emacs/.emacs.d/lisp/init-aggressive-indent.el" 0 48 (ivy-index 0)) #("d:/emacs/.emacs.d/lisp/init-dumb-jump.el" 0 40 (ivy-index 0)) #("d:/emacs/.emacs.d/lisp/init-avyace.el" 0 37 (ivy-index 0)) #("d:/emacs/.emacs.d/lisp/init-slime.el" 0 36 (ivy-index 1)) #("d:/emacs/.emacs.d/lisp/init-sidebar.el" 0 38 (ivy-index 0)) #("d:/emacs/.emacs.d/lisp/init-tabbar.el" 0 37 (ivy-index 0)) #("d:/emacs/.emacs.d/lisp/init-complete.el" 0 39 (ivy-index 1)) #("d:/emacs/.emacs.d/lisp/init-key.el" 0 34 (ivy-index 0)) #("d:/emacs/.emacs.d/lisp/init-paths.el.back" 0 41 (ivy-index 3)) #("d:/emacs/.emacs.d/lisp/init-custom.el" 0 37 (ivy-index 0)) "d:/emacs/.emacs.d/init.el.改造的" "d:/emacs/.emacs.d--ori.spac/spacemacs/core/core-command-line.el" "c:/Users/wangms/.spf13-vim-3/.vim/bundle/emmet-vim/unittest.vim" "c:/Users/wangms/.spf13-vim-3/.vimrc.before" "~/.emacs.d/init.el" #("d:/emacs/.emacs.d/lisp/init-load-paths.el" 0 41 (ivy-index 0)) #("d:/emacs/.emacs.d/lisp/init-projectile.el" 0 41 (ivy-index 0)) "~/.emacs.d/init.el" "~/.emacs.d/init.el" "~/.emacs.d/init.el" "~/.emacs.d/lisp/init-modeline.el" "~/.emacs.d/init.el" "d:/emacs/.emacs.d--ori.spac/spacemacs/init.el" "d:/emacs/.emacs.d--ori.spac/init.el" "d:/emacs/.emacs.d--ori.spac/spacemacs/init.el" "d:/emacs/.emacs.d--ori.spac/spacemacs/core/core-load-paths.el" "d:/emacs/.emacs.d--ori.spac/spacemacs/core/core-load-paths.el" "~/.emacs.d/init.el" "~/.emacs.d/lisp/init-ivy.el" "~/.emacs.d/init.el" "~/.emacs.d/lisp/init-theme.el" "~/.emacs.d/lisp/init-face.el" "~/.emacs.d/init.el" "~/.emacs.d/lisp/init-theme.el" "~/.emacs.d/init.el" "~/.emacs.d/lisp/init-theme.el" "~/.emacs.d/init.el" "~/.emacs.d/lisp/init-modeline.el" "~/.emacs.d/init.el" "~/.emacs.d/lisp/init-modeline.el" "~/.emacs.d/init.el" "~/.emacs.d/lisp/init-icons.el" "~/.emacs.d/init.el" "~/.emacs.d/lisp/init-frame-hooks.el" "~/.emacs.d/init.el" "~/.emacs.d/lisp/init-basic.el" "~/.emacs.d/lisp/init-frame.el" "~/.emacs.d/init.el" "~/.emacs.d/lisp/init-edit-visual.el" "~/.emacs.d/init.el" "~/.emacs.d/lisp/init-edit.el" "~/.emacs.d/init.el" "~/.emacs.d/lisp/init-theme.el" "~/.emacs.d/lisp/init-edit.el" "~/.emacs.d/init.el" "~/.emacs.d/lisp/init-edit.el" "~/.emacs.d/init.el" "~/.emacs.d/init.el"))
(setq mark-ring 'nil)
(setq global-mark-ring 'nil)
(setq search-ring '("t" "r" "rq" "use-package" "use-pack" "backup" "b" "backup" "undo-tree" "lazy" "use-package" "use-packag" "use-package" "use"))
(setq regexp-search-ring '("keyca" "powerline-mouse" "nav/hydra/master" "toggle-nav-mode" "wangms-Loading" "centaur-theme-enable-" "icons" "hook"))
(setq extended-command-history '("display-line-numbers-mode" #("counsel-mode" 0 12 (ivy-index 2))))
